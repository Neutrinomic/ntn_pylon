type _anon_class_32_1 = 
 service {
   add_supported_ledger: (principal, variant {
                                       icp;
                                       icrc;
                                     }) -> () oneway;
   beat: () -> ();
   get_ledger_errors: () -> (vec vec text) query;
   get_ledgers_info: () -> (vec LedgerInfo) query;
   icrc3_get_archives: (GetArchivesArgs) -> (GetArchivesResult) query;
   icrc3_get_blocks: (GetBlocksArgs) -> (GetBlocksResult) query;
   icrc3_get_tip_certificate: () -> (opt DataCertificate) query;
   icrc3_supported_block_types: () -> (vec BlockType) query;
   icrc55_command: (BatchCommandRequest) -> (BatchCommandResponse);
   icrc55_get_controller_nodes: (GetControllerNodesRequest) ->
    (vec NodeShared) query;
   icrc55_get_defaults: (text) -> (CreateRequest) query;
   icrc55_get_nodes: (vec GetNode) -> (vec opt NodeShared) query;
   icrc55_get_pylon_meta: () -> (PylonMetaResp) query;
   icrc55_virtual_balances: (VirtualBalancesRequest) ->
    (VirtualBalancesResponse) query;
 };
type VirtualBalancesResponse = 
 vec record {
       SupportedLedger;
       nat;
     };
type VirtualBalancesRequest = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
type Version = 
 variant {
   alpha: vec nat16;
   beta: vec nat16;
   release: vec nat16;
 };
type ValueMap = 
 record {
   text;
   Value;
 };
type Value = 
 variant {
   Array: vec Value;
   Blob: blob;
   Int: int;
   Map: vec ValueMap;
   Nat: nat;
   Text: text;
 };
type TransferResponse = 
 variant {
   err: text;
   ok: nat64;
 };
type TransferRequest = 
 record {
   amount: nat;
   from:
    variant {
      account: Account;
      node: record {
              endpoint_idx: EndpointIdx;
              node_id: LocalNodeId;
            };
    };
   ledger: SupportedLedger;
   to:
    variant {
      account: Account;
      external_account: variant {
                          ic: Account;
                          other: blob;
                        };
      node: record {
              endpoint_idx: EndpointIdx;
              node_id: LocalNodeId;
            };
      node_billing: LocalNodeId;
    };
 };
type TransactionRange = 
 record {
   length: nat;
   start: nat;
 };
type SupportedLedger = 
 variant {
   ic: principal;
   other: record {
            ledger: blob;
            platform: nat64;
          };
 };
type SourceEndpointResp = 
 record {
   balance: nat;
   endpoint: Endpoint;
   name: text;
 };
type Shared__7 = 
 record {
   init: record {};
   internals: record {wait_until_ts: nat64;};
   variables: record {
                interval_sec: NumVariant;
                max_amount: NumVariant;
              };
 };
type Shared__6 = 
 record {
   init: record {};
   internals: record {};
   variables: record {split: vec nat;};
 };
type Shared__5 = 
 record {
   init: record {};
   internals: record {};
   variables: record {interest: nat;};
 };
type Shared__4 = 
 record {
   init: record {};
   internals: record {
                tokenA: nat;
                tokenB: nat;
              };
   variables: record {
                flow: Flow;
                range: Range;
              };
 };
type Shared__3 = 
 record {
   init: record {};
   internals: record {
                price: opt float64;
                swap_fee_e4s: nat;
              };
   variables: record {max_slippage: float64;};
 };
type Shared__2 = 
 record {
   init: record {};
   internals: record {};
   variables: record {interest: nat;};
 };
type Shared__1 = 
 record {
   init: record {};
   internals: record {};
   variables: record {interest: nat;};
 };
type Shared = 
 variant {
   borrow: Shared__1;
   escrow: Shared__2;
   exchange: Shared__3;
   exchange_liquidity: Shared__4;
   lend: Shared__5;
   split: Shared__6;
   throttle: Shared__7;
 };
type SETTINGS = 
 record {
   ALLOW_TEMP_NODE_CREATION: bool;
   BILLING: BillingPylon;
   MAX_INSTRUCTIONS_PER_HEARTBEAT: nat64;
   PYLON_GOVERNED_BY: text;
   PYLON_NAME: text;
   REQUEST_MAX_EXPIRE_SEC: nat64;
   TEMP_NODE_EXPIRATION_SEC: nat64;
 };
type Range = 
 variant {
   full;
   partial: record {
              from_price: float64;
              to_price: float64;
            };
 };
type PylonMetaResp = 
 record {
   billing: BillingPylon;
   governed_by: text;
   modules: vec ModuleMeta;
   name: text;
   request_max_expire_sec: nat64;
   supported_ledgers: vec SupportedLedger;
   temporary_nodes: record {
                      allowed: bool;
                      expire_sec: nat64;
                    };
 };
type NumVariant = 
 variant {
   fixed: nat64;
   rnd: record {
          max: nat64;
          min: nat64;
        };
 };
type NodeShared = 
 record {
   active: bool;
   billing:
    record {
      account: Account;
      billing_option: nat;
      cost_per_day: nat;
      current_balance: nat;
      expires: opt nat64;
      frozen: bool;
      transaction_fee: BillingTransactionFee;
    };
   controllers: vec Controller;
   created: nat64;
   custom: opt Shared;
   destinations: vec DestinationEndpointResp;
   extractors: vec LocalNodeId;
   id: LocalNodeId;
   modified: nat64;
   refund: Account;
   sources: vec SourceEndpointResp;
 };
type ModuleMeta = 
 record {
   author: text;
   author_account: Account;
   billing: vec Billing;
   create_allowed: bool;
   description: text;
   destinations: EndpointsDescription;
   id: text;
   ledger_slots: vec text;
   name: text;
   sources: EndpointsDescription;
   supported_ledgers: vec SupportedLedger;
   temporary_allowed: bool;
   version: Version;
 };
type ModifyRequest__7 = 
 record {
   interval_sec: NumVariant;
   max_amount: NumVariant;
 };
type ModifyRequest__6 = record {split: vec nat;};
type ModifyRequest__5 = record {interest: nat;};
type ModifyRequest__4 = 
 record {
   flow: Flow;
   range: Range;
 };
type ModifyRequest__3 = record {max_slippage: float64;};
type ModifyRequest__2 = record {interest: nat;};
type ModifyRequest__1 = record {interest: nat;};
type ModifyRequest = 
 variant {
   borrow: ModifyRequest__1;
   escrow: ModifyRequest__2;
   exchange: ModifyRequest__3;
   exchange_liquidity: ModifyRequest__4;
   lend: ModifyRequest__5;
   split: ModifyRequest__6;
   throttle: ModifyRequest__7;
 };
type ModifyNodeResponse = 
 variant {
   err: text;
   ok: GetNodeResponse;
 };
type ModifyNodeRequest = 
 record {
   LocalNodeId;
   opt CommonModifyRequest;
   opt ModifyRequest;
 };
type LocalNodeId = nat32;
type LedgerLabel = text;
type LedgerInfo = 
 record {
   id: principal;
   info: variant {
           icp: Info;
           icrc: Info__1;
         };
 };
type LedgerIdx = nat;
type InputAddress = 
 variant {
   ic: Account;
   other: blob;
   temp: record {
           id: nat32;
           source_idx: EndpointIdx;
         };
 };
type Info__1 = 
 record {
   accounts: nat;
   actor_principal: principal;
   errors: nat;
   lastTxTime: nat64;
   last_indexed_tx: nat;
   pending: nat;
   reader_instructions_cost: nat64;
   sender_instructions_cost: nat64;
 };
type Info = 
 record {
   accounts: nat;
   actor_principal: opt principal;
   errors: nat;
   lastTxTime: nat64;
   last_indexed_tx: nat;
   pending: nat;
   reader_instructions_cost: nat64;
   sender_instructions_cost: nat64;
 };
type GetTransactionsResult = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: opt Value;
                 id: nat;
               };
   log_length: nat;
 };
type GetTransactionsFn = func (vec TransactionRange) ->
                          (GetTransactionsResult) query;
type GetNodeResponse = 
 record {
   active: bool;
   billing:
    record {
      account: Account;
      billing_option: nat;
      cost_per_day: nat;
      current_balance: nat;
      expires: opt nat64;
      frozen: bool;
      transaction_fee: BillingTransactionFee;
    };
   controllers: vec Controller;
   created: nat64;
   custom: opt Shared;
   destinations: vec DestinationEndpointResp;
   extractors: vec LocalNodeId;
   id: LocalNodeId;
   modified: nat64;
   refund: Account;
   sources: vec SourceEndpointResp;
 };
type GetNode = 
 variant {
   endpoint: Endpoint;
   id: LocalNodeId;
 };
type GetControllerNodesRequest = 
 record {
   id: Controller;
   length: nat32;
   start: LocalNodeId;
 };
type GetBlocksResult = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: opt Value;
                 id: nat;
               };
   log_length: nat;
 };
type GetBlocksArgs = vec TransactionRange;
type GetArchivesResultItem = 
 record {
   canister_id: principal;
   end: nat;
   start: nat;
 };
type GetArchivesResult = vec GetArchivesResultItem;
type GetArchivesArgs = record {from: opt principal;};
type Flow = 
 variant {
   add;
   hold;
   pass_through;
   remove;
 };
type EndpointsDescription = 
 vec record {
       LedgerIdx;
       LedgerLabel;
     };
type EndpointOther = 
 record {
   account: blob;
   ledger: blob;
   platform: nat64;
 };
type EndpointOptOther = 
 record {
   account: opt blob;
   ledger: blob;
   platform: nat64;
 };
type EndpointOptIC = 
 record {
   account: opt Account;
   ledger: principal;
 };
type EndpointOpt = 
 variant {
   ic: EndpointOptIC;
   other: EndpointOptOther;
 };
type EndpointIdx = nat8;
type EndpointIC = 
 record {
   account: Account;
   ledger: principal;
 };
type Endpoint = 
 variant {
   ic: EndpointIC;
   other: EndpointOther;
 };
type DestinationEndpointResp = 
 record {
   endpoint: EndpointOpt;
   name: text;
 };
type DeleteNodeResp = 
 variant {
   err: text;
   ok;
 };
type DataCertificate = 
 record {
   certificate: blob;
   hash_tree: blob;
 };
type CreateRequest__7 = 
 record {
   init: record {};
   variables: record {
                interval_sec: NumVariant;
                max_amount: NumVariant;
              };
 };
type CreateRequest__6 = 
 record {
   init: record {};
   variables: record {split: vec nat;};
 };
type CreateRequest__5 = 
 record {
   init: record {};
   variables: record {interest: nat;};
 };
type CreateRequest__4 = 
 record {
   init: record {};
   variables: record {
                flow: Flow;
                range: Range;
              };
 };
type CreateRequest__3 = 
 record {
   init: record {};
   variables: record {max_slippage: float64;};
 };
type CreateRequest__2 = 
 record {
   init: record {};
   variables: record {interest: nat;};
 };
type CreateRequest__1 = 
 record {
   init: record {};
   variables: record {interest: nat;};
 };
type CreateRequest = 
 variant {
   borrow: CreateRequest__1;
   escrow: CreateRequest__2;
   exchange: CreateRequest__3;
   exchange_liquidity: CreateRequest__4;
   lend: CreateRequest__5;
   split: CreateRequest__6;
   throttle: CreateRequest__7;
 };
type CreateNodeResponse = 
 variant {
   err: text;
   ok: GetNodeResponse;
 };
type CreateNodeRequest = 
 record {
   CommonCreateRequest;
   CreateRequest;
 };
type Controller = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
type CommonModifyRequest = 
 record {
   active: opt bool;
   controllers: opt vec Controller;
   destinations: opt vec opt InputAddress;
   extractors: opt vec LocalNodeId;
   refund: opt Account;
   sources: opt vec opt InputAddress;
 };
type CommonCreateRequest = 
 record {
   affiliate: opt Account;
   billing_option: nat;
   controllers: vec Controller;
   destinations: vec opt InputAddress;
   extractors: vec LocalNodeId;
   ledgers: vec SupportedLedger;
   refund: Account;
   sources: vec opt InputAddress;
   temp_id: nat32;
   temporary: bool;
 };
type CommandResponse = 
 variant {
   create_node: CreateNodeResponse;
   delete_node: DeleteNodeResp;
   modify_node: ModifyNodeResponse;
   transfer: TransferResponse;
 };
type Command = 
 variant {
   create_node: CreateNodeRequest;
   delete_node: LocalNodeId;
   modify_node: ModifyNodeRequest;
   transfer: TransferRequest;
 };
type BlockType = 
 record {
   block_type: text;
   url: text;
 };
type BillingTransactionFee = 
 variant {
   flat_fee_multiplier: nat;
   none;
   transaction_percentage_fee_e8s: nat;
 };
type BillingPylon = 
 record {
   freezing_threshold_days: nat;
   ledger: principal;
   min_create_balance: nat;
   operation_cost: nat;
   platform_account: Account;
   pylon_account: Account;
   split: BillingFeeSplit;
 };
type BillingFeeSplit = 
 record {
   affiliate: nat;
   author: nat;
   platform: nat;
   pylon: nat;
 };
type Billing = 
 record {
   cost_per_day: nat;
   transaction_fee: BillingTransactionFee;
 };
type BatchCommandResponse = 
 variant {
   err:
    variant {
      caller_not_controller;
      duplicate: nat;
      expired;
      invalid_signature;
      other: text;
    };
   ok: record {
         commands: vec CommandResponse;
         id: nat;
       };
 };
type BatchCommandRequest = 
 record {
   commands: vec Command;
   controller: Controller;
   expire_at: opt nat64;
   request_id: opt nat32;
   signature: opt blob;
 };
type ArchivedTransactionResponse = 
 record {
   args: vec TransactionRange;
   callback: GetTransactionsFn;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : (opt SETTINGS) -> _anon_class_32_1
