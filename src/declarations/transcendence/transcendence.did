type _anon_class_32_1 = 
 service {
   add_supported_ledger: (id: principal, ltype: variant {
                                                  icp;
                                                  icrc;
                                                }) -> () oneway;
   chrono_records: () -> (opt ChronoRecord) query;
   dex_ohlcv: (req: OHLCVRequest) -> (OHLCVResponse) query;
   dex_pool_create: (req: PoolRequest) -> (PoolResponse);
   dex_pool_delete: (req: DeletePoolRequest) -> (DeletePoolResponse);
   dex_quote: (req: QuoteRequest) -> (QuoteResponse) query;
   dex_swap: (req: SwapRequest) -> (SwapResponse);
   get_ledger_errors: () -> (vec vec text) query;
   get_ledgers_info: () -> (vec LedgerInfo__1) query;
   icrc3_get_archives: (args: GetArchivesArgs) -> (GetArchivesResult) query;
   icrc3_get_blocks: (args: GetBlocksArgs) -> (GetBlocksResult) query;
   icrc3_get_tip_certificate: () -> (opt DataCertificate) query;
   icrc3_supported_block_types: () -> (vec BlockType) query;
   icrc45_get_pairs: (req: PairRequest) -> (PairResponse) query;
   icrc45_list_pairs: () -> (ListPairsResponse) query;
   icrc55_account_register: (acc: Account) -> ();
   icrc55_accounts: (req: AccountsRequest) -> (AccountsResponse) query;
   icrc55_command: (req: BatchCommandRequest) -> (BatchCommandResponse);
   icrc55_command_validate: (req: BatchCommandRequest) ->
    (ValidationResult) query;
   icrc55_get_controller_nodes: (req: GetControllerNodesRequest) ->
    (vec NodeShared) query;
   icrc55_get_defaults: (id: text) -> (CreateRequest) query;
   icrc55_get_nodes: (req: vec GetNode) -> (vec opt NodeShared) query;
   icrc55_get_pylon_meta: () -> (PylonMetaResp) query;
   top_accounts: (ledger: principal) -> (vec record {
                                               blob;
                                               nat;
                                             }) query;
 };
type Version = 
 variant {
   alpha: vec nat16;
   beta: vec nat16;
   release: vec nat16;
 };
type ValueMap = 
 record {
   text;
   Value;
 };
type Value = 
 variant {
   Array: vec Value;
   Blob: blob;
   Int: int;
   Map: vec ValueMap;
   Nat: nat;
   Text: text;
 };
type ValidationResult = 
 variant {
   Err: text;
   Ok: text;
 };
type TransferResponse = 
 variant {
   err: text;
   ok: nat64;
 };
type TransferRequest = 
 record {
   amount: nat;
   from:
    variant {
      account: Account;
      node: record {
              endpoint_idx: EndpointIdx;
              node_id: LocalNodeId;
            };
    };
   ledger: SupportedLedger;
   to:
    variant {
      account: Account;
      external_account: variant {
                          ic: Account;
                          other: blob;
                        };
      node: record {
              endpoint_idx: EndpointIdx;
              node_id: LocalNodeId;
            };
      node_billing: LocalNodeId;
      temp: record {
              id: nat32;
              source_idx: EndpointIdx;
            };
    };
 };
type TransactionRange = 
 record {
   length: nat;
   start: nat;
 };
type TokenId = 
 record {
   path: PlatformPath;
   platform: PlatformId;
 };
type TokenData = 
 record {
   volume24: Amount;
   volume_total: Amount;
 };
type SwapResponse = 
 variant {
   err: text;
   ok;
 };
type SwapRequest = 
 record {
   account: Account;
   amount: nat;
   ledger_from: SupportedLedger;
   ledger_to: SupportedLedger;
   min_amount_out: nat;
 };
type Swap = 
 record {
   amountIn: nat;
   amountOut: nat;
   from: Account;
   newPrice: float64;
   to: Account;
   zeroForOne: bool;
 };
type SupportedLedger = 
 variant {
   ic: principal;
   other: record {
            ledger: blob;
            platform: nat64;
          };
 };
type SourceEndpointResp = 
 record {
   balance: nat;
   endpoint: Endpoint;
   name: text;
 };
type Shared__8 = 
 record {
   init: record {};
   internals: record {};
   variables: record {description: text;};
 };
type Shared__7 = 
 record {
   init: record {};
   internals: record {wait_until_ts: nat64;};
   variables: record {
                interval_sec: NumVariant;
                max_amount: NumVariant;
              };
 };
type Shared__6 = 
 record {
   init: record {};
   internals:
    record {
      current_source: nat;
      next_send_ts: nat64;
      next_switch_ts: nat64;
    };
   variables:
    record {
      amount_a: NumVariant;
      amount_b: NumVariant;
      switch_chance: nat64;
      switch_interval: NumVariant;
      throttle_interval: NumVariant;
    };
 };
type Shared__5 = 
 record {
   init: record {};
   internals: record {};
   variables: record {split: vec nat;};
 };
type Shared__4 = 
 record {
   init: record {};
   internals:
    record {
      addedTokenA: nat;
      addedTokenB: nat;
      last_error: opt text;
      last_run: nat64;
      tokenA: nat;
      tokenB: nat;
    };
   variables: record {
                flow: Flow;
                range: Range;
              };
 };
type Shared__3 = 
 record {
   init: record {};
   internals:
    record {
      current_rate: opt float64;
      last_buy: nat64;
      last_error: opt text;
      last_run: nat64;
      next_buy: nat64;
      price: opt float64;
      swap_fee_e4s: nat;
    };
   variables:
    record {
      buy_for_amount: nat;
      buy_interval_seconds: nat64;
      max_impact: float64;
      max_rate: opt float64;
    };
 };
type Shared__2 = 
 record {
   init: record {};
   internals:
    record {
      current_ratios: vec float64;
      last_error: opt text;
      last_rebalance: nat64;
      last_remove: nat64;
      last_run: nat64;
      total_value_usd: float64;
    };
   variables:
    record {
      price_ledger_id: principal;
      rebalance_interval_seconds: nat64;
      remove_amount_usd: nat;
      remove_interval_seconds: nat64;
      swap_amount_usd: nat;
      threshold_percent: float64;
      token_ratios: vec nat;
    };
 };
type Shared__1 = 
 record {
   init: record {};
   internals:
    record {
      addedTokenA: nat;
      addedTokenB: nat;
      current_price: opt float64;
      last_error: opt text;
      last_run: nat64;
      tokenA: nat;
      tokenB: nat;
    };
   variables:
    record {
      interval_seconds: nat64;
      mode: Mode;
      range_percent: float64;
      remove_percent: float64;
    };
 };
type Shared = 
 variant {
   auto_liquidity: Shared__1;
   balancer: Shared__2;
   exchange: Shared__3;
   exchange_liquidity: Shared__4;
   split: Shared__5;
   switcher: Shared__6;
   throttle: Shared__7;
   vault: Shared__8;
 };
type Sent = 
 record {
   amount: nat;
   ledger: principal;
   to: variant {
         icp: blob;
         icrc: Account;
       };
 };
type SETTINGS = 
 record {
   ALLOW_TEMP_NODE_CREATION: bool;
   BILLING: BillingPylon;
   MAX_INSTRUCTIONS_PER_HEARTBEAT: nat64;
   PYLON_GOVERNED_BY: text;
   PYLON_NAME: text;
   REQUEST_MAX_EXPIRE_SEC: nat64;
   TEMP_NODE_EXPIRATION_SEC: nat64;
 };
type Received = 
 record {
   amount: nat;
   from: variant {
           icp: blob;
           icrc: Account;
         };
   ledger: principal;
 };
type Rate = float64;
type Range = variant {
               partial: record {
                          from_price: float64;
                          to_price: float64;
                        };};
type QuoteResponse = 
 variant {
   err: text;
   ok:
    record {
      after_price: float64;
      amount_in_max: nat;
      amount_out: nat;
      before_price: float64;
      fees: vec record {
                  text;
                  SupportedLedger;
                  nat;
                };
      path: vec record {
                  SupportedLedger;
                  float64;
                };
    };
 };
type QuoteRequest = 
 record {
   amount: nat;
   ledger_from: SupportedLedger;
   ledger_to: SupportedLedger;
 };
type PylonMetaResp = 
 record {
   billing: BillingPylon;
   governed_by: text;
   modules: vec ModuleMeta;
   name: text;
   request_max_expire_sec: nat64;
   supported_ledgers: vec LedgerInfo;
   temporary_nodes: record {
                      allowed: bool;
                      expire_sec: nat64;
                    };
 };
type PoolResponse = 
 variant {
   err: text;
   ok;
 };
type PoolRequest = 
 record {
   base: principal;
   quote: principal;
 };
type PlatformPath = blob;
type PlatformId = nat64;
type PairResponseOk = vec PairData;
type PairResponseErr = 
 variant {
   InvalidDepthLevel: Level;
   InvalidDepthLimit: nat32;
   NotFound: PairId;
 };
type PairResponse = 
 variant {
   Err: PairResponseErr;
   Ok: PairResponseOk;
 };
type PairRequest = 
 record {
   depth: opt DepthRequest;
   pairs: vec PairId;
 };
type PairInfo = 
 record {
   data: DataSource;
   id: PairId;
 };
type PairId = 
 record {
   base: TokenId;
   quote: TokenId;
 };
type PairData = 
 record {
   asks: vec record {
               Rate;
               Amount;
             };
   base: TokenData;
   bids: vec record {
               Rate;
               Amount;
             };
   id: PairId;
   last: Rate;
   last_timestamp: nat64;
   quote: TokenData;
   updated_timestamp: nat64;
   volume24_USD: opt Amount;
   volume_total_USD: opt Amount;
 };
type OHLCVResponse = 
 variant {
   err: text;
   ok:
    record {
      data: vec MarketTickInner;
      l1: SupportedLedger;
      l2: SupportedLedger;
    };
 };
type OHLCVRequest = 
 record {
   l1: SupportedLedger;
   l2: SupportedLedger;
   period: variant {
             t1d;
             t1h;
             t1m;
             t1s;
           };
 };
type NumVariant = 
 variant {
   fixed: nat64;
   rnd: record {
          max: nat64;
          min: nat64;
        };
 };
type NodeShared = 
 record {
   active: bool;
   billing:
    record {
      account: Account;
      billing_option: nat;
      cost_per_day: nat;
      current_balance: nat;
      expires: opt nat64;
      frozen: bool;
      transaction_fee: BillingTransactionFee;
    };
   controllers: vec Controller;
   created: nat64;
   custom: opt Shared;
   destinations: vec DestinationEndpointResp;
   extractors: vec LocalNodeId;
   id: LocalNodeId;
   modified: nat64;
   refund: Account;
   sources: vec SourceEndpointResp;
 };
type ModuleMeta = 
 record {
   author: text;
   author_account: Account;
   billing: vec Billing;
   create_allowed: bool;
   description: text;
   destinations: EndpointsDescription;
   id: text;
   ledger_slots: vec text;
   name: text;
   sources: EndpointsDescription;
   supported_ledgers: vec SupportedLedger;
   temporary_allowed: bool;
   version: Version;
 };
type ModifyRequest__8 = record {description: text;};
type ModifyRequest__7 = 
 record {
   interval_sec: NumVariant;
   max_amount: NumVariant;
 };
type ModifyRequest__6 = 
 record {
   amount_a: NumVariant;
   amount_b: NumVariant;
   switch_chance: nat64;
   switch_interval: NumVariant;
   throttle_interval: NumVariant;
 };
type ModifyRequest__5 = record {split: vec nat;};
type ModifyRequest__4 = 
 record {
   flow: Flow;
   range: Range;
 };
type ModifyRequest__3 = 
 record {
   buy_for_amount: nat;
   buy_interval_seconds: nat64;
   max_impact: float64;
   max_rate: opt float64;
 };
type ModifyRequest__2 = 
 record {
   price_ledger_id: principal;
   rebalance_interval_seconds: nat64;
   remove_amount_usd: nat;
   remove_interval_seconds: nat64;
   swap_amount_usd: nat;
   threshold_percent: float64;
   token_ratios: vec nat;
 };
type ModifyRequest__1 = 
 record {
   interval_seconds: nat64;
   mode: Mode;
   range_percent: float64;
   remove_percent: float64;
 };
type ModifyRequest = 
 variant {
   auto_liquidity: ModifyRequest__1;
   balancer: ModifyRequest__2;
   exchange: ModifyRequest__3;
   exchange_liquidity: ModifyRequest__4;
   split: ModifyRequest__5;
   switcher: ModifyRequest__6;
   throttle: ModifyRequest__7;
   vault: ModifyRequest__8;
 };
type ModifyNodeResponse = 
 variant {
   err: text;
   ok: GetNodeResponse;
 };
type ModifyNodeRequest = 
 record {
   LocalNodeId;
   opt CommonModifyRequest;
   opt ModifyRequest;
 };
type Mode = 
 variant {
   auto;
   remove;
 };
type MarketTickInner = 
 record {
   nat32;
   float64;
   float64;
   float64;
   float64;
   nat;
 };
type LocalNodeId = nat32;
type ListPairsResponse = vec PairInfo;
type LiquidityRemove = 
 record {
   amountA: nat;
   amountB: nat;
   from: Account;
   toA: Account;
   toB: Account;
 };
type LiquidityAdd = 
 record {
   amountA: nat;
   amountB: nat;
   fromA: Account;
   fromB: Account;
   to: Account;
 };
type Level = nat8;
type LedgerLabel = text;
type LedgerInfo__1 = 
 record {
   id: principal;
   info: variant {
           icp: Info;
           icrc: Info__1;
         };
 };
type LedgerInfo = 
 record {
   decimals: nat8;
   fee: nat;
   ledger: SupportedLedger;
   name: text;
   symbol: text;
 };
type LedgerIdx = nat;
type InputAddress = 
 variant {
   ic: Account;
   other: blob;
   temp: record {
           id: nat32;
           source_idx: EndpointIdx;
         };
 };
type Info__1 = 
 record {
   accounts: nat;
   actor_principal: principal;
   errors: nat;
   lastTxTime: nat64;
   last_indexed_tx: nat;
   pending: nat;
   reader_instructions_cost: nat64;
   sender_instructions_cost: nat64;
 };
type Info = 
 record {
   accounts: nat;
   actor_principal: opt principal;
   errors: nat;
   lastTxTime: nat64;
   last_indexed_tx: nat;
   pending: nat;
   reader_instructions_cost: nat64;
   sender_instructions_cost: nat64;
 };
type GetTransactionsResult = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: opt Value;
                 id: nat;
               };
   log_length: nat;
 };
type GetTransactionsFn = func (vec TransactionRange) ->
                          (GetTransactionsResult) query;
type GetNodeResponse = 
 record {
   active: bool;
   billing:
    record {
      account: Account;
      billing_option: nat;
      cost_per_day: nat;
      current_balance: nat;
      expires: opt nat64;
      frozen: bool;
      transaction_fee: BillingTransactionFee;
    };
   controllers: vec Controller;
   created: nat64;
   custom: opt Shared;
   destinations: vec DestinationEndpointResp;
   extractors: vec LocalNodeId;
   id: LocalNodeId;
   modified: nat64;
   refund: Account;
   sources: vec SourceEndpointResp;
 };
type GetNode = 
 variant {
   endpoint: Endpoint;
   id: LocalNodeId;
 };
type GetControllerNodesRequest = 
 record {
   id: Controller;
   length: nat32;
   start: LocalNodeId;
 };
type GetBlocksResult = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: opt Value;
                 id: nat;
               };
   log_length: nat;
 };
type GetBlocksArgs = vec TransactionRange;
type GetArchivesResultItem = 
 record {
   canister_id: principal;
   end: nat;
   start: nat;
 };
type GetArchivesResult = vec GetArchivesResultItem;
type GetArchivesArgs = record {from: opt principal;};
type Flow = 
 variant {
   add;
   remove;
 };
type EndpointsDescription = 
 vec record {
       LedgerIdx;
       LedgerLabel;
     };
type EndpointOther = 
 record {
   account: blob;
   ledger: blob;
   platform: nat64;
 };
type EndpointOptOther = 
 record {
   account: opt blob;
   ledger: blob;
   platform: nat64;
 };
type EndpointOptIC = 
 record {
   account: opt Account;
   ledger: principal;
 };
type EndpointOpt = 
 variant {
   ic: EndpointOptIC;
   other: EndpointOptOther;
 };
type EndpointIdx = nat8;
type EndpointIC = 
 record {
   account: Account;
   ledger: principal;
 };
type Endpoint = 
 variant {
   ic: EndpointIC;
   other: EndpointOther;
 };
type DestinationEndpointResp = 
 record {
   endpoint: EndpointOpt;
   name: text;
 };
type DepthRequest = 
 record {
   level: Level;
   limit: nat32;
 };
type DeletePoolResponse = 
 variant {
   err: text;
   ok;
 };
type DeletePoolRequest = 
 record {
   base: principal;
   quote: principal;
 };
type DeleteNodeResp = 
 variant {
   err: text;
   ok;
 };
type DataSource = principal;
type DataCertificate = 
 record {
   certificate: blob;
   hash_tree: blob;
 };
type CreateRequest__8 = 
 record {
   init: record {};
   variables: record {description: text;};
 };
type CreateRequest__7 = 
 record {
   init: record {};
   variables: record {
                interval_sec: NumVariant;
                max_amount: NumVariant;
              };
 };
type CreateRequest__6 = 
 record {
   init: record {};
   variables:
    record {
      amount_a: NumVariant;
      amount_b: NumVariant;
      switch_chance: nat64;
      switch_interval: NumVariant;
      throttle_interval: NumVariant;
    };
 };
type CreateRequest__5 = 
 record {
   init: record {};
   variables: record {split: vec nat;};
 };
type CreateRequest__4 = 
 record {
   init: record {};
   variables: record {
                flow: Flow;
                range: Range;
              };
 };
type CreateRequest__3 = 
 record {
   init: record {};
   variables:
    record {
      buy_for_amount: nat;
      buy_interval_seconds: nat64;
      max_impact: float64;
      max_rate: opt float64;
    };
 };
type CreateRequest__2 = 
 record {
   init: record {};
   variables:
    record {
      price_ledger_id: principal;
      rebalance_interval_seconds: nat64;
      remove_amount_usd: nat;
      remove_interval_seconds: nat64;
      swap_amount_usd: nat;
      threshold_percent: float64;
      token_ratios: vec nat;
    };
 };
type CreateRequest__1 = 
 record {
   init: record {};
   variables:
    record {
      interval_seconds: nat64;
      mode: Mode;
      range_percent: float64;
      remove_percent: float64;
    };
 };
type CreateRequest = 
 variant {
   auto_liquidity: CreateRequest__1;
   balancer: CreateRequest__2;
   exchange: CreateRequest__3;
   exchange_liquidity: CreateRequest__4;
   split: CreateRequest__5;
   switcher: CreateRequest__6;
   throttle: CreateRequest__7;
   vault: CreateRequest__8;
 };
type CreateNodeResponse = 
 variant {
   err: text;
   ok: GetNodeResponse;
 };
type CreateNodeRequest = 
 record {
   CommonCreateRequest;
   CreateRequest;
 };
type Controller = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
type CommonModifyRequest = 
 record {
   active: opt bool;
   controllers: opt vec Controller;
   destinations: opt vec opt InputAddress;
   extractors: opt vec LocalNodeId;
   refund: opt Account;
   sources: opt vec opt InputAddress;
 };
type CommonCreateRequest = 
 record {
   affiliate: opt Account;
   billing_option: nat;
   controllers: vec Controller;
   destinations: vec opt InputAddress;
   extractors: vec LocalNodeId;
   initial_billing_amount: opt nat;
   ledgers: vec SupportedLedger;
   refund: Account;
   sources: vec opt InputAddress;
   temp_id: nat32;
   temporary: bool;
 };
type CommandResponse = 
 variant {
   create_node: CreateNodeResponse;
   delete_node: DeleteNodeResp;
   modify_node: ModifyNodeResponse;
   transfer: TransferResponse;
 };
type Command = 
 variant {
   create_node: CreateNodeRequest;
   delete_node: LocalNodeId;
   modify_node: ModifyNodeRequest;
   transfer: TransferRequest;
 };
type ChronoRecord = 
 variant {
   account: C100_Account;
   dex: C200_Dex;
 };
type C200_Dex = 
 variant {
   liquidityAdd: LiquidityAdd;
   liquidityRemove: LiquidityRemove;
   swap: Swap;
 };
type C100_Account = 
 variant {
   received: Received;
   sent: Sent;
 };
type BlockType = 
 record {
   block_type: text;
   url: text;
 };
type BillingTransactionFee = 
 variant {
   flat_fee_multiplier: nat;
   none;
   transaction_percentage_fee_e8s: nat;
 };
type BillingPylon = 
 record {
   freezing_threshold_days: nat;
   ledger: principal;
   min_create_balance: nat;
   operation_cost: nat;
   platform_account: Account;
   pylon_account: Account;
   split: BillingFeeSplit;
 };
type BillingFeeSplit = 
 record {
   affiliate: nat;
   author: nat;
   platform: nat;
   pylon: nat;
 };
type Billing = 
 record {
   cost_per_day: nat;
   transaction_fee: BillingTransactionFee;
 };
type BatchCommandResponse = 
 variant {
   err:
    variant {
      caller_not_controller;
      duplicate: nat;
      expired;
      invalid_signature;
      other: text;
    };
   ok: record {
         commands: vec CommandResponse;
         id: opt nat;
       };
 };
type BatchCommandRequest = 
 record {
   commands: vec Command;
   controller: Controller;
   expire_at: opt nat64;
   request_id: opt nat32;
   signature: opt blob;
 };
type ArchivedTransactionResponse = 
 record {
   args: vec TransactionRange;
   callback: GetTransactionsFn;
 };
type Amount = nat;
type AccountsResponse = vec AccountEndpoint;
type AccountsRequest = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
type AccountEndpoint = 
 record {
   balance: nat;
   endpoint: Endpoint;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : (DFV_SETTINGS: opt SETTINGS) -> _anon_class_32_1
